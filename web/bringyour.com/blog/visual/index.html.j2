{{ html_header() }}
<head>
    {{ title_icons_meta() }}

    {{ fonts() }}

    {{ app_js_css() }}

    <style>
        iframe {
            border: 0;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        h1 {
            margin-top: 24px;
            margin-bottom: 24px;
        }

        h2 {
            margin-top: 12px;
            margin-bottom: 12px;
        }

        h4 {
            margin-top: 12px;
            margin-bottom: 12px;
        }

        li {
            margin-bottom: 12px;
        }
    </style>
</head>
<body>
    {{ dialog_connect() }}

    {{ tab_header() }}

    <div class="runner">

<h1
id="visual-explanation-how-to-build-a-vpn-from-a-bunch-of-personal-consumer-devices">Visual explanation: how to build a VPN from a bunch of personal consumer devices</h1>
<p>This document illustrates the BringYour network, an app that gives people access to uniform internet and IP privacy. The
components are <a href="https://github.com/bringyour" target="_blank">open source</a> and run on phones, TVs, and
computers. The design of the network has these
goals:</p>
<ul>
<li><strong>Be safe for senders and providers</strong>, take care of users starting with actively knowing as little about them as possible</li>
<li><strong>Be anonymous</strong>, so that participants do not know who is
sending the traffic, due to using multiple hops in routing the
traffic</li>
<li><strong>Re-use existing internet resources</strong>, making it hard
for internet services to identify users of the network versus existing
traffic</li>
<li><strong>Use web standards</strong> that cannot be separated from
normal web traffic at the network level, so that everyone is free to
participate</li>
</ul>
<p>BringYour is <strong>a VPN that works like home</strong>,
because it is literally made from a bunch of homes doing normal home
stuff.</p>
<p>Legally BringYour the company is an overlay ISP run as a revenue
share, and participants are protected as part of the ISP by laws like
the DMCA in the US. The network is dynamic where participants can come
and go at any time.</p>
<p>This article illustrates and briefly explains three parts of the
network:</p>
<ol type="1">
<li><strong>Latency Map</strong> to find near peers</li>
<li><strong>Linear Path</strong> to find a near-linear latency
sequence of hops between sender and egress</li>
<li><strong>Self-Healing Sender Algorithm</strong> to continuously
select egress devices based on passive network statistics</li>
</ol>
<p>The three parts, along with a distributed contract system, come
together to create a public VPN where anyone can join and send IP
traffic to egress from a <strong>destination criteria</strong>. The
network charges per used data transfer GiB and pays out part of the
charge to all the hops used to send the data.</p>

<h2 id="latency-map-to-find-near-peers">Latency Map to find near
peers</h2>
<figure>
<iframe src="vis/latencymap/index.html" width="768" height="768" scrolling="no"></iframe>
<figcaption aria-hidden="true">Latency map. The sender is the black dot, showing pings to extenders and the nearest providers using the ping data. Hover to move the sender.</figcaption>
</figure>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Type of destination criteria</th>
<th style="text-align: left;">Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Group</td>
<td style="text-align: left;">&quot;Any device in a safe internet region,
like EU, Nordic, California&quot;</td>
</tr>
<tr class="even">
<td style="text-align: left;">Country/Region/City</td>
<td style="text-align: left;">&quot;Any device in Switzerland&quot;</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Specific device</td>
<td style="text-align: left;">&quot;A TV device shared with me&quot;</td>
</tr>
</tbody>
</table>
<p>A challenge is how can a sender quickly orient itself on the network
to find:</p>
<ul>
<li>Nearby peers</li>
<li>A starting point to find a linear path from itself to a
destination</li>
</ul>
<p>The solution used by BringYour is for each node to maintain a map of
ping values to a known set of <strong>extenders</strong>. The sender
pings a small random subset of extenders (3-5), while providers (the
egress hops) continually ping as many extenders as possible. It is in
the interest of providers to have accurate pings to as many extenders as
possible to be able to pair with more senders.</p>
<p>The high dimensional vector of ping values is reduced to lower
dimensions, called the <strong>latency map</strong>. Closeness of two
nodes on the latency map is done with least squares.</p>
<p>The sender maintains its small set of ping values as a location
fingerprint to enumerate linear paths. The ping times are the only
location information BringYour uses for routing decisions. In this way
the network is resilient to participants from centralized networks like
Starlink, since users phsyically close to each other may not be close to
each other in the latency map.</p>
<h2
id="linear-path-to-find-a-near-linear-latency-sequence-of-hops-between-sender-and-egress">Linear Path to find a near-linear latency sequence of hops between sender and egress</h2>
<figure>
<iframe src="vis/linpath/index.html" width="768" height="768" scrolling="no"></iframe>
<figcaption aria-hidden="true">Linear path. The black dots are providers arranged in x,y by the latency map.</figcaption>
</figure>
<p>A sender directly sending data to an egress over the internet is the
fastest route, but does not hide the sender's identity. BringYour uses an
approach called linear path (linpath) to add additional hops to achieve
<strong>anonymous internet</strong>. The goals of the linear path
are:</p>
<ul>
<li>Randomize the hop selection with unpredictable choices</li>
<li>Maintain as near to a direct path between sender and egress. In
other words minimize the latency delta between the direct path and the
linear path.</li>
</ul>
<h4
id="randomize-the-hop-selection-with-unpredictable-choices">Randomize
the hop selection with unpredictable choices</h4>
<p>By design, each hop should not know whether it is the first or nth.
This is done by each hop maintaining a NAT dynamically controlled by the
network, so that each hop only receives from one prior and sends to one
after without knowing <em>how many</em> prior or after.</p>
<p>However, if one wanted to spy on a target, and the selection of hops
was predictable, the approach would be to force yourself to be the first
hop by working the selection process backwards. The linear path
selection is made unpredictable by using a bisection approach, so
that:</p>
<ul>
<li>The first hop is derived from log_2(n) previous decisions</li>
<li>Each decision is made using a probability field based on the
destination</li>
<li>Hops are spaced across as many regions as possible</li>
</ul>
<p>Given that the destination can change quite radically (e.g.Â Any
device in a safe internet region), deriving the first hop should be
harder as more provider devices join the network.</p>
<p>If providers share information, it would be possible to statistically
derive the first hop if enough collaborators are chosen in a linear
path. Since collaborators are correlated with nearness, hops are spaced
across as many regions as possible. The number of hops a sender chooses
can be seen as an estimate of how much information sharing occurs on the
network.</p>
<p>For a completely independent network, three hops would be sufficient.
Three is the current default.</p>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 80%" />
</colgroup>
<thead>
<tr class="header">
<th>Hop</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Sender</td>
<td>Knows who they are</td>
</tr>
<tr class="even">
<td>First Midpoint</td>
<td>Knows they are not the egress, but not whether they are first or
second</td>
</tr>
<tr class="odd">
<td>Second Midpoint</td>
<td>Knows they are not the egress, but not whether they are first or
second</td>
</tr>
<tr class="even">
<td>Egress</td>
<td>Knows they are the egress</td>
</tr>
</tbody>
</table>
<h4
id="maintain-as-near-to-a-direct-path-between-sender-and-egress">Maintain
as near to a direct path between sender and egress</h4>
<p>BringYour uses a linear path finding algorithm that recursively
bisects the path, randomly choosing the midpoint weighted by closeness
to the true midpoint. Each bisection adds a latency error (the height of
the triangle between start, end, and mid). The total latency error is
the sum of the bisection errors.</p>
<h2
id="self-healing-sender-algorithm-to-continuously-select-egress-devices-based-on-passive-network-statistics">Self-Healing
sender algorithm to continuously select egress devices based on passive
network statistics</h2>
<!-- Nav tabs -->
<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="network-normal-tab" data-bs-toggle="tab" data-bs-target="#network-normal" type="button" role="tab" aria-controls="network-normal" aria-selected="true">Normal Network</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="network-not-good-tab" data-bs-toggle="tab" data-bs-target="#network-not-good" type="button" role="tab" aria-controls="network-not-good" aria-selected="false">Not Good Network</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="network-even-worse-tab" data-bs-toggle="tab" data-bs-target="#network-even-worse" type="button" role="tab" aria-controls="network-even-worse" aria-selected="false">Even Worse Network</button>
  </li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
  <div class="tab-pane active" id="network-normal" role="tabpanel" aria-labelledby="network-normal-tab"><figure>
<iframe src="vis/client2vis/index-low.html" width="768" height="2048" scrolling="no"></iframe>
<figcaption aria-hidden="true">Self-healing
sender algorithm simulation. The left circles are destinations that represent one or more TCP connections to the dst and the percentage of content transferred. The right circles are linpaths to egress the data, with hidden degenerate states. Using simulation data from a normal network.</figcaption>
</figure></div>
  <div class="tab-pane" id="network-not-good" role="tabpanel" aria-labelledby="network-not-good-tab"><figure>
<iframe src="vis/client2vis/index-med.html" width="768" height="2048" scrolling="no"></iframe>
<figcaption aria-hidden="true">Self-healing
sender algorithm simulation. The left circles are destinations that represent one or more TCP connections to the dst and the percentage of content transferred. The right circles are linpaths to egress the data, with hidden degenerate states. Using simulation data from a bad network, which is something most users will not encounter.</figcaption>
</figure></div>
  <div class="tab-pane" id="network-even-worse" role="tabpanel" aria-labelledby="network-even-worse-tab"><figure>
<iframe src="vis/client2vis/index-high.html" width="768" height="2048" scrolling="no"></iframe>
<figcaption aria-hidden="true">Self-healing
sender algorithm simulation. The left circles are destinations that represent one or more TCP connections to the dst and the percentage of content transferred. The right circles are linpaths to egress the data, with hidden degenerate states. Using simulation data from an even worse network, which is something most users will not encounter.</figcaption>
</figure></div>
</div>


<p>The sender wants to maximize the packet flow, and will use the
approach below to route packets through linpaths to reinforce the
linpaths that route the most packets. The are two degerate cases of a
linpath:</p>
<ul>
<li><strong>Drop</strong>. This can happen at any time if any device in
the linpath goes offline.</li>
<li><strong>Partial block</strong>. Some subset of traffic routes for
some time, but the application logic fails and reconnects.</li>
</ul>
<p>Both of these cases will self-select out using passive network
statistics if either:</p>
<ul>
<li>The expected capacity of a new linpath is greater than the
degenerate traffic.</li>
<li>There is another linpath that is routing more than the degenerate
traffic.</li>
</ul>
<h4 id="linpath-enumeration">Linpath Enumeration</h4>
<p>The BringYour network allows random enumeration of the linpaths from
sender to egress devices that match a destination criteria. The
enumeration looks like:</p>
<pre><code>linpath = next_linpath(visited_linpaths, destination_criteria)
if linpath is nil {
    visited_linpaths = []
    linpath = next_linpath(visited_linpaths)
}
if linpath is not nil {
    visited_linpaths.add(linpath)
}</code></pre>
<p>next_linpath returns a randomly selected linpath such that for any
hop [i], linpath[i] does not equal any other linpath[i] in the visited
list.</p>
<p>The BringYour network only considers devices that have passed an
initial routing check to include in the linpath. The linpath also
contains an estimate of capacity for the entire path, which is the min
of the capacity estimate for each device on the path.</p>
<h4 id="egress-window">Egress Window</h4>
<p>The sender choice algorithm maintains a window of egress devices that
grows to match a target size determine by network retries. A retry is an
IP packet sent to the same (dst, dst_port, protocol) with a different
(src, src_port).</p>
<p>The window target size is chosen using locally maintained statistics
for the (src, src_port, dst, dst_port, protocol, egress_id) packets:</p>
<pre><code>connection_tuples = connection_tuples_for_dst(dst, egress_window, connect_stats_window)
target_egress_window_size = base_window_size + expand_step * length(connection_tuples) / reconnect_threshold</code></pre>
<p>New egress devices are added using the linpath enumeration.</p>
<pre><code>n = target_egress_window_size - len(egress_window)
if 0 &lt; n {
    egress_window.extend(enumerate_up_to_n_linpaths(n))
}</code></pre>
<p>The egress window gives a grace period to each new egress device
before it can be removed. The device in the egress window with the
minimum transfer is removed at a regular interval until the window is
within [base_window_size, max_window_size]. Devices with no transfer in
a longer interval are removed until the window is base_window_size.</p>
<h4 id="egress-choice">Egress Choice</h4>
<p>Connection tuples must maintain an affinity to a single egress
device. For a new connection tuple, the choice of egress device uses
local statistics. The egress devices are weighted by net traffic and net
traffic to dst, and randomly chosen based on those weights.</p>
<pre><code>p_net = net_transfer(egress, transfer_stats_window) / net_transfer(egress_window, transfer_stats_window)
p_net_to_dst = net_transfer_to_dst(egress, dst, transfer_stats_window) / net_transfer_to_dst(egress_window, dst, transfer_stats_window)
p = (1 - dst_weight) * p_net + dst_weight * p_net_to_dst </code></pre>
<h4 id="reasonable-values">Reasonable Values</h4>
<p>Below are the default values used in the current version of the
network.</p>
<p><pre><code>base_window_size = 5
max_window_size = 10
reconnect_stats_window = 120s
reconnect_threshold = 3
expand_step = 2
transfer_stats_window = 15s
dst_weight = 0.5</code></pre></p>
<h4 id="conclusion">Conclusion</h4>
<p>There is much more to do to improve this, so please get in touch with
any feedback. You can also sign up to use BringYour to support this
work.</p>

</div>
    </div>

    {{ footer() }}

</body>
{{ html_footer() }}
